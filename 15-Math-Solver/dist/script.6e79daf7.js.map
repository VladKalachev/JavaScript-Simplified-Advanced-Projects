{"version":3,"sources":["parse.js","script.js"],"names":["PARENTHESIS_REGEX","MULTIPLY_DIVIDE_REGEX","EXPONENT_REGEX","ADD_SUBTRACT_REGEX","parse","equation","match","subEquation","result","groups","replace","handleMath","parseFloat","operand1","operand2","operation","number1","number2","require","inputElement","document","getElementById","outputElement","form","addEventListener","e","preventDefault","value","textContent"],"mappings":";AA4CC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,giBAAA,EAAA,CAAA,IAAA,EAAA,EAAA,IAAA,MAAA,OAAA,EAAA,OAAA,SAAA,KAAA,KAAA,EAAA,EAAA,QAAA,eAAA,SAAA,EAAA,GAAA,MAAA,IAAA,EAAA,MAAA,GAAA,mBAAA,EAAA,CAAA,IAAA,EAAA,KAAA,OAAA,EAAA,OAAA,SAAA,KAAA,KAAA,EAAA,WAAA,IAAA,EAAA,UAAA,MAAA,WAAA,EAAA,EAAA,EAAA,OAAA,MAAA,EAAA,GAAA,MAAA,KAAA,IAAA,KAAA,EAAA,EAAA,IAAA,EAAA,MAAA,KAAA,KAAA,OAAA,EAAA,OAAA,SAAA,KAAA,KAAA,EAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA5CD,IAAMA,EAAoB,EAAA,8BAAH,CAAA,SAAA,IACjBC,EAAwB,EAAA,qZAAH,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,IACrBC,EAAiB,EAAA,iZAAH,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,IACdC,EAAqB,EAAA,6ZAAH,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,IAET,SAASC,EAAMC,GACxBA,GAAAA,EAASC,MAAMN,GAAoB,CAC/BO,IACAC,EAASJ,EADKC,EAASC,MAAMN,GAAmBS,OAAOJ,UAGtDD,OAAAA,EADaC,EAASK,QAAQV,EAAmBQ,IAEnD,GAAIH,EAASC,MAAMJ,GAAiB,CACnCM,IAAAA,EAASG,EAAWN,EAASC,MAAMJ,GAAgBO,QAElDL,OAAAA,EADaC,EAASK,QAAQR,EAAgBM,IAEhD,GAAIH,EAASC,MAAML,GAAwB,CAC1CO,IAAAA,EAASG,EAAWN,EAASC,MAAML,GAAuBQ,QAEzDL,OAAAA,EADaC,EAASK,QAAQT,EAAuBO,IAEvD,GAAIH,EAASC,MAAMH,GAAqB,CACvCK,IAAAA,EAASG,EAAWN,EAASC,MAAMH,GAAoBM,QAEtDL,OAAAA,EADaC,EAASK,QAAQP,EAAoBK,IAGlDI,OAAAA,WAAWP,GAItB,SAASM,EAA8C,GAAjCE,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAClCC,EAASJ,WAAWC,GACpBI,EAAUL,WAAWE,GAEnBC,OAAAA,GACC,IAAA,IACEC,OAAAA,EAAUC,EACZ,IAAA,IACED,OAAAA,EAAUC,EACZ,IAAA,IACED,OAAAA,EAAUC,EACZ,IAAA,IACED,OAAAA,EAAUC,EACZ,IAAA,IACED,OAAAA,KAAAA,IAAAA,EAAWC;;ACrCxB,IAAMb,EAAQc,QAAQ,WAEhBC,EAAeC,SAASC,eAAe,YACvCC,EAAgBF,SAASC,eAAe,WACxCE,EAAOH,SAASC,eAAe,iBAErCE,EAAKC,iBAAiB,SAAU,SAAAC,GAC9BA,EAAEC,iBACIlB,IAAAA,EAASJ,EAAMe,EAAaQ,OAClCL,EAAcM,YAAcpB","file":"script.6e79daf7.js","sourceRoot":"..","sourcesContent":["const PARENTHESIS_REGEX = /\\((?<equation>[^\\(\\)]*)\\)/\nconst MULTIPLY_DIVIDE_REGEX = /(?<operand1>\\S+)\\s*(?<operation>[\\/\\*])\\s*(?<operand2>\\S+)/\nconst EXPONENT_REGEX = /(?<operand1>\\S+)\\s*(?<operation>\\^)\\s*(?<operand2>\\S+)/\nconst ADD_SUBTRACT_REGEX = /(?<operand1>\\S+)\\s*(?<operation>(?<!e)[\\-\\+])\\s*(?<operand2>\\S+)/\n\nexport default function parse(equation) {\n  if (equation.match(PARENTHESIS_REGEX)) {\n    const subEquation = equation.match(PARENTHESIS_REGEX).groups.equation\n    const result = parse(subEquation)\n    const newEquation = equation.replace(PARENTHESIS_REGEX, result)\n    return parse(newEquation)\n  } else if (equation.match(EXPONENT_REGEX)) {\n    const result = handleMath(equation.match(EXPONENT_REGEX).groups)\n    const newEquation = equation.replace(EXPONENT_REGEX, result)\n    return parse(newEquation)\n  } else if (equation.match(MULTIPLY_DIVIDE_REGEX)) {\n    const result = handleMath(equation.match(MULTIPLY_DIVIDE_REGEX).groups)\n    const newEquation = equation.replace(MULTIPLY_DIVIDE_REGEX, result)\n    return parse(newEquation)\n  } else if (equation.match(ADD_SUBTRACT_REGEX)) {\n    const result = handleMath(equation.match(ADD_SUBTRACT_REGEX).groups)\n    const newEquation = equation.replace(ADD_SUBTRACT_REGEX, result)\n    return parse(newEquation)\n  } else {\n    return parseFloat(equation)\n  }\n}\n  \nfunction handleMath({ operand1, operand2, operation }) {\n  const number1= parseFloat(operand1)\n  const number2 = parseFloat(operand2)\n\n  switch (operation) {\n      case \"*\":\n      return number1 * number2\n      case \"/\":\n      return number1 / number2\n      case \"+\":\n      return number1 + number2\n      case \"-\":\n      return number1 - number2\n      case \"^\":\n      return number1 ** number2\n  }\n}","// function parse(equation) {\n//   const step = getNextStep()\n//   const result = solve(step)\n//   replaceNextStep(equation, step, result)\n// }\nconst parse = require('./parse')\n\nconst inputElement = document.getElementById('equation')\nconst outputElement = document.getElementById('results')\nconst form = document.getElementById('equation-form')\n\nform.addEventListener('submit', e => {\n  e.preventDefault()\n  const result = parse(inputElement.value)\n  outputElement.textContent = result\n})\n\n// const equation = \"2 + 3 * 434343 / 731231\"\n// console.log(equation.match(MULTIPLY_DIVIDE_REGEX))"]}