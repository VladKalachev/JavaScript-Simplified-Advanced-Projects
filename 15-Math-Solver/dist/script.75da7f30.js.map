{"version":3,"sources":["parse.js","script.js"],"names":["PARENTHESIS_REGEX","MULTIPLY_DIVIDE_REGEX","EXPONENT_REGEX","ADD_SUBTRACT_REGEX","parse","equation","match","subEquation","groups","result","newEquation","replace","handleMath","parseFloat","operand1","operand2","operation","number1","number2","inputElement","document","getElementById","outputElement","form","addEventListener","e","preventDefault","value","textContent"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"..","sourcesContent":["const PARENTHESIS_REGEX = /\\((?<equation>[^\\(\\)]*)\\)/\nconst MULTIPLY_DIVIDE_REGEX = /(?<operand1>\\S+)\\s*(?<operation>[\\/\\*])\\s*(?<operand2>\\S+)/\nconst EXPONENT_REGEX = /(?<operand1>\\S+)\\s*(?<operation>\\^)\\s*(?<operand2>\\S+)/\nconst ADD_SUBTRACT_REGEX = /(?<operand1>\\S+)\\s*(?<operation>(?<!e)[\\-\\+])\\s*(?<operand2>\\S+)/\n\nexport default function parse(equation) {\n  if (equation.match(PARENTHESIS_REGEX)) {\n    const subEquation = equation.match(PARENTHESIS_REGEX).groups.equation\n    const result = parse(subEquation)\n    const newEquation = equation.replace(PARENTHESIS_REGEX, result)\n    return parse(newEquation)\n  } else if (equation.match(EXPONENT_REGEX)) {\n    const result = handleMath(equation.match(EXPONENT_REGEX).groups)\n    const newEquation = equation.replace(EXPONENT_REGEX, result)\n    return parse(newEquation)\n  } else if (equation.match(MULTIPLY_DIVIDE_REGEX)) {\n    const result = handleMath(equation.match(MULTIPLY_DIVIDE_REGEX).groups)\n    const newEquation = equation.replace(MULTIPLY_DIVIDE_REGEX, result)\n    return parse(newEquation)\n  } else if (equation.match(ADD_SUBTRACT_REGEX)) {\n    const result = handleMath(equation.match(ADD_SUBTRACT_REGEX).groups)\n    const newEquation = equation.replace(ADD_SUBTRACT_REGEX, result)\n    return parse(newEquation)\n  } else {\n    return parseFloat(equation)\n  }\n}\n  \nfunction handleMath({ operand1, operand2, operation }) {\n  const number1= parseFloat(operand1)\n  const number2 = parseFloat(operand2)\n\n  switch (operation) {\n      case \"*\":\n      return number1 * number2\n      case \"/\":\n      return number1 / number2\n      case \"+\":\n      return number1 + number2\n      case \"-\":\n      return number1 - number2\n      case \"^\":\n      return number1 ** number2\n  }\n}","// function parse(equation) {\n//   const step = getNextStep()\n//   const result = solve(step)\n//   replaceNextStep(equation, step, result)\n// }\nimport parse from './parse'\n\nconst inputElement = document.getElementById('equation')\nconst outputElement = document.getElementById('results')\nconst form = document.getElementById('equation-form')\n\nform.addEventListener('submit', e => {\n  e.preventDefault()\n  const result = parse(inputElement.value)\n  outputElement.textContent = result\n})\n\n// const equation = \"2 + 3 * 434343 / 731231\"\n// console.log(equation.match(MULTIPLY_DIVIDE_REGEX))"]}